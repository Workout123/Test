Javascript
------------

https://developer.mozilla.org/en-US/Learn/Getting_started_with_the_web/JavaScript_basics

https://www.codementor.io/learn-javascript-online

http://javascriptissexy.com/how-to-learn-javascript-properly/

http://www.slideshare.net/domenicdenicola/callbacks-promises-and-coroutines-oh-my-the-evolution-of-asynchronicity-in-javascript



Jquery
-------

https://learn.jquery.com/

http://www.jquery-tutorial.net/





JS notes
----------

TUTORIAL VIDS
=============

General concepts

	Funtional programing lang - lisp

	Prototypal ingeritance -objects inherit from objects
==============================
NUMBER-String-Object-boolean-undefined-null
Number - 8B double precision float
	MATH bject -abs,floor,random
	Nunber("")
		
	parseInt("",radix)
	unary plus +"32" =32
String- sting of 16 bit ucs-2
	String()	
Boolean
	Boolean(Truthy,falsy)
		FALSY-NAN ,FALSE,0,"",null,undefined
		truthy-"0","false"
	=======================	

Dynamic Objects	

- Unification of object and hashtable
- new Object() creates an empty container of key value pairs.

operator
	== != supports type coercion
	=== !== does proper Comparison

	&& guard || default
	a && b => return b if a is truty
	a || b => return a if a is truthy

===============
statements
	labelled break
		loop:for()	

	for name in Object{
		if(Object.hasOwnProperty(name)){

		}
	}	

	throw new Error(reason)

	throw{	
		name:	ExName
		message: reason
	}


	try{
		..
	}
	catch(e){
		switch(e.name){}
	}
	
	#has only funtion scope

=====================
Object 
 	var obj ={"name":value,"":val}	 (literal{})
 	new Object();
 	//object(Object.prototype)// doesnt support
 	function object(o)
 	{
 		function F(){}
 		F.prototype = o;
 		return new F(); 
 	}


 	Linkage
 		var newobj = object(oldobj

 		the child object inherits parents content. It also copies the dynamic state of the parent.

 		All objects inherit from Object.prototype. Which has some default methods like hasOwnProperty

 		Objects are passed(as args) by reference

 		=== checks by refs not by value

 		delete myObj[name];
 	
 	Prototype
 		All objs injerit from a prototype

 		if not specified then Object.prototype	

====================
Array
	array inherits from Object

	Arrays unlike objects have length member 	

	concat,join,pop,push,slice,splice

	[] literal

	mylist[mylist.length] = newitem;

	delete mylist[1] //numberiing still exists

	mylist.splice(1,1)
	no Dot notation	

	How to know if an obj is an array
		value.constructor === Array
		value instanceof Array
===========================
===========================
Functions 
	also an object

	Function stored in an object is Method

	Closures
		A closure is a function having access to the parent scope, even after the parent function has closed.

		var add = (function(){
			var counter = 0;
			return function(){ return counter+=1;}
		})();

	Invocation	
		function form
			funname()
				this will ref the global obj
				vas that=this; for helper functions
		method form
			obj.method()
				this refers to obj
		Constructor form
			new fun()
			new obj is formed, this refers to new obj

	arguments parameter -array-like				

=====================================

DOM

	image.src= value

	image.getAttribute()
	image.setAttribute(,)

	node.className

	node.style.stylename

	node.currentStyle.stylename	Only IE

	document.defaultView().
	    getComputedStyle(node, "").
	    getPropertyValue(stylename);

===================================
	document.createElement(tagName)

	document.createTextNode(text)

	node.cloneNode()
	Clone an individual element.

	node.cloneNode(true)
	Clone an element and all of its descendents.    


	node.appendChild(new)

	node.insertBefore(new, sibling)

	node.replaceChild(new, old)

		old.parentNode.replaceChild(new, old)

	node.removechild
	''''''''

	Microsoft
	node.attachEvent("on" + type, f);

	W3C
	node.addEventListener(type, f, false)



	var event = new CustomEvent("anim");
	target.nextSibling.dispatchEvent(event);
=================================================================
=================================================================

Jquery
Namespace Coonflict	
	var $j = jQuery.noConflict();
		
			or

	(function( $ ) {
	    // Your jQuery code here, using the $
	})( jQuery );		


	$(window).load(fun()) // whenthe entire window is loded
	$(dcument).ready(function(){})
	 	$(fun(){})


$("obj").click(fun...)
	event.preventDefault();


$().addClass()
$().removeClass()	

Attr
	$( "a" ).attr( "href", "allMyHrefsAreTheSameNow.html" );
	 
	$( "a" ).attr({
	    title: "all titles are the same too!",
	    href: "somethingNew.html"
	});

selecstors
	().has()
	().not()
	.filter
	.first() last()
	.eq(2)  .gt()

	.get //retourns DOM object not jquerry obj

=============================
Setter
	/ The .html() method sets all the h1 elements' html to be "hello world":
	$( "h1" ).html( "hello world" );
Getter
	$( "h1" ).html( )
.html()	

$( "#content" )
    .find( "h3" )
    .eq( 2 )
        .html( "new text for the third h3!" )
        .end() // Restores the selection to all h3s in #content
    .eq( 0 )
        .html( "new text for the first h3!" );

.html() – Get or set the HTML contents.
.text() – Get or set the text contents; HTML will be stripped.
.attr() – Get or set the value of the provided attribute.
.width() – Get or set the width in pixels of the first element in the selection as an integer.
.height() – Get or set the height in pixels of the first element in the selection as an integer.
.position() – Get an object with position information for the first element in the selection, relative to its first positioned ancestor. This is a getter only.
.val() – Get or set the value of form elements.


.insertBefore() and .before(), .appendTo() and .append(), and .prependTo() and .prepend()..insertAfter() and .after().        
	$( "#myList li:first" ).appendTo( "#myList" );
	$( "#mylsit li:first" ).clone([true]).appendTo("#myList");

.remove()
.detach()
.empty()	
==============================
creating elements
	$( "<li class=\"new\">new list item</li>" );
	$( "<a/>", {
	 	html: "This is a <strong>new</strong> link",
	    "class": "new",
	    href: "foo.html"
	});

Traversing
	Ancestors
		.parent(), .parents(), .parentsUntil(), and .closest().
	childrens
		.children() and .find().
	Siblings
		prev() next() siblings() .nextAll(), .nextUntil(), .prevAll() and .prevUntil()

Styling
	.csc//not recomended for setting	


	h1.addClass( "big" );
	h1.removeClass( "big" );
	h1.toggleClass( "big" );
	if ( h1.hasClass( "big" ) ) {
    ...
	}

Data = to avoid mem leak
	$( "#myDiv" ).data( "keyName", { foo: "bar" } );

	$( "#myList li" ).each(function() {
 
    var li = $( this );
    var div = li.find( "div.content" );
 
    li.data( "contentDiv", div );
 
});


=========================
Utility funtions
	$. namesspace

	1  $.trim()
	2  $.each([ "foo", "bar", "baz" ], function( idx, val ) {
   		 console.log( "element " + idx + " is " + val );
		});
	3  $.inArray
	4  $.extend()
	5  $.proxy
	6  $.isNumeric
	7  $.type

=========================
Iterators
	for non jquery objs
		$.each(arr,function(indx,val))
	for jquerry objs
		$(li).each(function(indx,element){
			$(this)
				or //////////////////////////////////////////////////Question whwn to use $(this) and just this
																	https://learn.jquery.com/using-jquery-core/iterating/
			$(ele)
		})	
	
	you can use setter methods in a similar fasion
		$(li).val(function(index,value){
			return value+"Add"	
		})	

	
	.map
	$( "li" ).map( function( index, element ) {
	    return element.id;
	}).get();
	 
	// Also returns [ "a", "b", "c" ]
	// Note that the value comes first with $.map
	$.map( arr, function( value, index ) {
	    return value.id;
	});	

.index()
	jqobj.index()  ---index within parent
	     .index("str")
	     .index(jqobj)

========================
Form
	$( "#x" ).prop( "disabled", true );
	$( "#x" ).prop( "checked", true );
	$( "#myselect option:selected" ).text();
