
https://learn.jquery.com/

http://www.jquery-tutorial.net/

		<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
=================================================================
						Jquery
=================================================================
=================================================================

Namespace Coonflict	
	var $j = jQuery.noConflict();
		
			or

	(function( $ ) {
	    // Your jQuery code here, using the $
	})( jQuery );		


	$(window).load(fun()) // whenthe entire window is loded
	$(dcument).ready(function(){})
	 	$(fun(){})


$("obj").click(fun...)
	event.preventDefault();


$().addClass()
$().removeClass()	

Attr
	$( "a" ).attr( "href", "allMyHrefsAreTheSameNow.html" );
	 
	$( "a" ).attr({
	    title: "all titles are the same too!",
	    href: "somethingNew.html"
	});

selecstors
	().has()
	().not()
	.filter
	.first() last()
	.eq(2)  .gt()

	.get //retourns DOM object not jquerry obj

=============================
Setter
	/ The .html() method sets all the h1 elements' html to be "hello world":
	$( "h1" ).html( "hello world" );
Getter
	$( "h1" ).html( )
.html()	

$( "#content" )
    .find( "h3" )
    .eq( 2 )
        .html( "new text for the third h3!" )
        .end() // Restores the selection to all h3s in #content
    .eq( 0 )
        .html( "new text for the first h3!" );

.html() – Get or set the HTML contents.
.text() – Get or set the text contents; HTML will be stripped.
.attr() – Get or set the value of the provided attribute.
.width() – Get or set the width in pixels of the first element in the selection as an integer.
.height() – Get or set the height in pixels of the first element in the selection as an integer.
.position() – Get an object with position information for the first element in the selection, relative to its first positioned ancestor. This is a getter only.
.val() – Get or set the value of form elements.


.insertBefore() and .before(), .appendTo() and .append(), and .prependTo() and .prepend()..insertAfter() and .after().        
	$( "#myList li:first" ).appendTo( "#myList" );
	$( "#mylsit li:first" ).clone([true]).appendTo("#myList");

.remove()
.detach()
.empty()	
==============================
creating elements
	$( "<li class=\"new\">new list item</li>" );
	$( "<a/>", {
	 	html: "This is a <strong>new</strong> link",
	    "class": "new",
	    href: "foo.html"
	});

Traversing
	Ancestors
		.parent(), .parents(), .parentsUntil(), and .closest().
	childrens
		.children() and .find().
	Siblings
		prev() next() siblings() .nextAll(), .nextUntil(), .prevAll() and .prevUntil()

Styling
	.csc//not recomended for setting	


	h1.addClass( "big" );
	h1.removeClass( "big" );
	h1.toggleClass( "big" );
	if ( h1.hasClass( "big" ) ) {
    ...
	}

Data = to avoid mem leak
	$( "#myDiv" ).data( "keyName", { foo: "bar" } );

	$( "#myList li" ).each(function() {
	 
	    var li = $( this );
	    var div = li.find( "div.content" );
	 
	    li.data( "contentDiv", div );
	 
	});


=========================
Utility funtions
	$. namesspace

	1  $.trim()
	2  $.each([ "foo", "bar", "baz" ], function( idx, val ) {
   		 console.log( "element " + idx + " is " + val );
		});
	3  $.inArray
	4  $.extend()
	5  $.proxy // runs a function in the provided scope
	6  $.isNumeric
	7  $.type

=========================
Iterators
	for non jquery objs
		$.each(arr,function(indx,val))
	for jquerry objs
		$(li).each(function(indx,element){
			$(this)
				or //////////////////////////////////////////////////Question whwn to use $(this) and just this
																	https://learn.jquery.com/using-jquery-core/iterating/
			$(ele)
		})	
	
	you can use setter methods in a similar fasion
		$(li).val(function(index,value){
			return value+"Add"	
		})	

	
	.map
	$( "li" ).map( function( index, element ) {
	    return element.id;
	}).get();
	 
	// Also returns [ "a", "b", "c" ]
	// Note that the value comes first with $.map
	$.map( arr, function( value, index ) {
	    return value.id;
	});	

.index()
	jqobj.index()  ---index within parent
	     .index("str")
	     .index(jqobj)

========================
Form
	$( "#x" ).prop( "disabled", true );
	$( "#x" ).prop( "checked", true );
	$( "#myselect option:selected" ).text();


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

EVENTS
	
	.bind
	.click(), .focus(), .blur(), .change()

	.on //event delegation/ no bubbling / Generalized
	.on("click",fun())
	.on("",{},fun(.data))
	.on("click focus",fun())
	.on({"click":fun(),..})

	$("body").on({"click":fun()} ,"button")   or  .on("","button",fun())
		 //Event Deegation/We can use this to add event handlers to dynamically created objs.	

	pageX, pageY ,type ,which ,data, namespace, target timestanp
	preventDefault() stopPropogation()

	.one()

	.hover(fun())
	.hover(funenter(),funleave())



	.trigger("click") .triggerHandler()
	.simulate("")

=+++====+++=====++====++=====++===++++======++===+++===++=+++++==+++++===+++=====++++===++===++===+++==+++===+++=++++==++++==+++====++=
=++++++++++===+++===+++==++=+++=++++==+++==++===++====++===+===+++=++++++===+++===+++++==++++===++++==+++===+++===+++===+++====+++=====
Effects
 
 .hide()
 .show()
 	ARGS =['slow', 'normal', or 'fast' ,NUMBER in ms]

  	.slideDown() and .slideUp() 
  	.fadeIn() and .fadeOut()

 .toggle() .slideToggle() and .fadeToggle().

 .stop()
 	$( "<button type='button'></button>" )
    .text( "Stop All Animations" )
    .on( "click", function() {
        $( "body *" ).filter( ":animated" ).stop();
    })
    .appendTo( document.body );

 .delay()
 	$( "h1" ).hide( 500 ).delay( 1500 ).show( 300 );

 jQuery.fx
 	jQuery.fx.speeds.fast = 300;

 $( "div.funtimes" ).animate(
    {
        left: "+=50",
        opacity: 0.25
    },
    300);

    Queue and Dequeue
    	https://learn.jquery.com/effects/queue-and-dequeue-explained/		


	   

